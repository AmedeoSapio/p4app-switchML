/*
  Copyright 2021 Intel-KAUST-Microsoft

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/

syntax = "proto3";

package switchml_proto;

service Session {
  rpc RdmaAttach (RdmaAttachRequest) returns (RdmaAttachResponse) {}
  rpc RdmaCreateSession (RdmaCreateSessionRequest) returns (RdmaCreateSessionResponse) {}
  rpc UdpAttach (UdpAttachRequest) returns (UdpAttachResponse) {}
  rpc UdpCreateSession (UdpCreateSessionRequest) returns (UdpCreateSessionResponse) {}
  rpc Detach (SessionId) returns (Result) {}
  rpc DestroySession (SessionId) returns (Result) {}
}

enum PacketSize {
  MTU_128  = 0;
  MTU_256  = 1;
  MTU_512  = 2;
  MTU_1024 = 3;
}

message Result {
  int32 code = 1;
  string message = 2;
}

message SessionId {
  uint32 id = 1;
}

message RdmaEndpoint {
  uint32 rank = 1;
  uint64 mac = 2;
  uint32 ipv4 = 3;
  uint32 rkey = 4;
  repeated uint32 qpns = 5;
  repeated uint32 psns = 6;
}

message RdmaAttachRequest {
  SessionId session_id = 1;
  uint32 pool_size = 2;
  PacketSize packet_size = 3;
  uint32 message_size = 4;
  RdmaEndpoint endpoint = 5;
}

message RdmaCreateSessionRequest {
  SessionId session_id = 1;
  uint32 pool_size = 2;
  PacketSize packet_size = 3;
  uint32 message_size = 4;
  repeated RdmaEndpoint workers = 5;
}

message RdmaCreateSessionResponse {
  uint32 pool_size = 1;
  PacketSize packet_size = 2;
  uint32 message_size = 3;
  repeated RdmaEndpoint switch = 4;
  Result error = 5;
}

message RdmaAttachResponse {
  uint32 pool_size = 1;
  PacketSize packet_size = 2;
  uint32 message_size = 3;
  RdmaEndpoint switch = 4;
  Result error = 5;
}

message UdpEndpoint {
  uint32 rank = 1;
  uint64 mac = 2;
  uint32 ipv4 = 3;
  uint32 udp_port = 4;
}

message UdpAttachRequest {
  SessionId session_id = 1;
  uint32 pool_size = 2;
  PacketSize packet_size = 3;
  UdpEndpoint endpoint = 4;
}

message UdpCreateSessionRequest {
  uint32 session_id = 1;
  uint32 pool_size = 2;
  PacketSize packet_size = 3;
  repeated UdpEndpoint workers = 4;
}

message UdpCreateSessionResponse {
  uint32 pool_size = 1;
  PacketSize packet_size = 2;
  repeated UdpEndpoint switch = 3;
  Result error = 4;
}

message UdpAttachResponse {
  uint32 pool_size = 1;
  PacketSize packet_size = 2;
  UdpEndpoint switch = 3;
  Result error = 4;
}
